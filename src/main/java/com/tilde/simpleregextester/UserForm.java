/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.tilde.simpleregextester;

import java.awt.Color;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;

/**
 *
 * @author janis.slapins
 */
public class UserForm extends javax.swing.JFrame {

    /**
     * Creates new form UserForm
     */
    public UserForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        testButton = new javax.swing.JButton();
        outputLabel = new javax.swing.JLabel();
        rxField = new javax.swing.JTextField();
        rxLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        inputPane = new javax.swing.JTextPane();
        inputLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        outputPane = new javax.swing.JTextPane();
        javax.swing.JButton closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simple Tester for Java Regular Expressions");
        setPreferredSize(new java.awt.Dimension(432, 250));

        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel1.setPreferredSize(new java.awt.Dimension(430, 100));

        testButton.setText("Test");
        testButton.addActionListener(this::testButtonActionPerformed);

        outputLabel.setText("Matched Groups:");

        rxLabel.setText("RegEx:");
        rxLabel.setToolTipText("");

        inputPane.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jScrollPane1.setViewportView(inputPane);

        inputLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        inputLabel.setText("Text:");
        inputLabel.setToolTipText("");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(outputLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 293, Short.MAX_VALUE)
                .addComponent(testButton))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(rxLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(rxField, javax.swing.GroupLayout.Alignment.TRAILING)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputLabel)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rxField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rxLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(testButton)
                    .addComponent(outputLabel)))
        );

        jSplitPane2.setTopComponent(jPanel1);

        jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel2.setPreferredSize(new java.awt.Dimension(430, 100));
        jPanel2.setRequestFocusEnabled(false);

        outputPane.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jScrollPane2.setViewportView(outputPane);

        closeButton.setText("Close");
        closeButton.addActionListener(this::closeButtonActionPerformed);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(closeButton))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeButton))
        );

        jSplitPane2.setRightComponent(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void testButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testButtonActionPerformed
        try {
            testRegex();
        } catch (BadLocationException ex) {
            Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_testButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_closeButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new UserForm().setVisible(true));
    }
    
    private void testRegex() throws BadLocationException {
        String text = inputPane.getText();
        
        // This fixes possible issues with EOL characters by replacing them with Unix-style EOLs.
        text = text.replace("\r\n", "\n");
        inputPane.setText(text);
        
        String pattern = rxField.getText();
        if (pattern.isEmpty()) { return; }
        
        Highlighter hltr = inputPane.getHighlighter();
        Highlighter.Highlight[] highlights = hltr.getHighlights();
        
        for (Highlighter.Highlight h : highlights) {
            if (h.getPainter() instanceof DefaultHighlighter.DefaultHighlightPainter) {
                hltr.removeHighlight(h);
            }
        }
        
        outputPane.setText("");
        
        if (!text.isEmpty()) {
            ArrayList<ArrayList<Integer>> highlightPositions = new ArrayList<>();
            int count = 0;
            
            StringBuilder sb = new StringBuilder();
            
            ArrayList<String> regexGroups = getRegexGroups(pattern);
          
            try {
                Pattern r = Pattern.compile(pattern);
                Matcher m = r.matcher(text);
                while (m.find()) {
                    count++;
                    
                    ArrayList<Integer> currentHighlightPositions = new ArrayList<>();
                    currentHighlightPositions.add(m.start());
                    currentHighlightPositions.add(m.end());
                    highlightPositions.add(currentHighlightPositions);
                    
                    sb.append(String.format("Match %d\n", count));
                    for (int i = 0; i <= m.groupCount(); i++) {
                        if (m.start(i) >= 0 && m.end(i) >= 0) {
                            String matchPosString = String.format("pos. %d", m.start(i));
                            matchPosString += String.format(", length %d", m.end(i) - m.start(i));
                            sb.append(String.format("   Group%d (%s): %s   =>   '%s'\n", i, matchPosString, regexGroups.get(i), m.group(i)));
                        }
                    }
                    sb.append("- - - - -\n");
                }
            }
            catch (Exception e) {
                outputPane.setForeground(Color.red);
                outputPane.setText(e.getMessage());
                return;
            }
           
            if (count > 0) {
                for (ArrayList<Integer> curPositions : highlightPositions) {
                    hltr.addHighlight(Integer.parseInt(curPositions.get(0).toString()),
                            Integer.parseInt(curPositions.get(1).toString()),
                            new DefaultHighlighter.DefaultHighlightPainter(Color.green));
                }
                
                outputPane.setForeground(Color.blue);
                outputPane.setText(sb.toString());
            }
            else {
                outputPane.setForeground(Color.red);
                outputPane.setText("NO MATCH!");
            }
        }
    }

    ArrayList<String> getRegexGroups(String rx) {
        ArrayList<String> rxGroups = new ArrayList<>();
        Deque<Integer> openingBracketPositions = new ArrayDeque<>();
        List<Integer> closingBracketPositions = new ArrayList<>();
        List<RegexGroup> matchingGroups = new ArrayList<>();
        
        rxGroups.add(rx); // Group0 is always the entire regex string

        char[] rxChars = rx.toCharArray();
        
        for (int i = 0; i < rxChars.length; i++) {
            String stringBefore = new String(rxChars, 0, i);
            char curChar = rxChars[i];
            if (curChar == '(' && !hasEscapeSequence(stringBefore)) {
                openingBracketPositions.push(i);
            }
            else if (curChar == ')' && !hasEscapeSequence(stringBefore)) {
                closingBracketPositions.add(i);
            }
        }

        while (!openingBracketPositions.isEmpty()) {
            Integer[] currentGroup = new Integer[2];
            currentGroup[0] = openingBracketPositions.pop();

            for (int i = 0; i < closingBracketPositions.size(); i++) {
                if (closingBracketPositions.get(i) > currentGroup[0]) {
                    currentGroup[1] = closingBracketPositions.get(i);
                    closingBracketPositions.remove(i);
                    break;
                }
            }

            RegexGroup curRegexGroup = new RegexGroup(currentGroup[0], currentGroup[1], rx);
            matchingGroups.add(curRegexGroup);
        }

        matchingGroups.sort(RegexGroup::compareMC);

        matchingGroups.forEach(group -> rxGroups.add(group.toString()));

        return rxGroups;
    }
    
    boolean hasEscapeSequence(String s) {
        int backslashCount = 0;
        if (!s.isEmpty()) {
            char[] stringChars = s.toCharArray();
            
            for (int i = stringChars.length - 1; i >= 0; --i) {
                if (stringChars[i] == '\\') {
                    ++backslashCount;
                }
                else {
                    break;
                }
            }
        }

        return backslashCount % 2 == 1;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel inputLabel;
    private javax.swing.JTextPane inputPane;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JLabel outputLabel;
    private javax.swing.JTextPane outputPane;
    private javax.swing.JTextField rxField;
    private javax.swing.JLabel rxLabel;
    private javax.swing.JButton testButton;
    // End of variables declaration//GEN-END:variables
}
